// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//TODO: Добавить таблицы
//TODO: Добавить упущенные поля 
//TODO: Добавить связи между таблицами

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Label {
    id String @id @default(uuid()) @unique
    name String
    user_id String
    
    user User @relation(fields: [user_id], references: [id])
    label_notes Label_Notes @relation(fields: [id], references: [label_id])
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Label_Notes {
    id String @id @default(uuid()) @unique
    note_id String @unique
    label_id String @unique
    isPublic Boolean @default(false)

    notes Note[]
    labels Label[]
    Editor Editor[]
    Reader Reader[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Note {
    id String @id @default(uuid()) @unique
    title String 
    description String
    content Json
    isPublic Boolean @default(false)
    user_id String
    
    Reader Reader[]
    Editor Editor[]
    user User @relation(fields: [user_id], references: [id])
    label_notes Label_Notes @relation(fields: [id], references: [note_id])
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Editor {
    id String @id @default(uuid()) @unique
    user_id String
    note_id String
    label_notes_id String
    
    note Note @relation(fields: [note_id], references: [id])
    user User  @relation(fields: [user_id], references: [id])
    label_note Label_Notes @relation(fields: [label_notes_id], references: [id])
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Reader {
    id String @id @default(uuid()) @unique
    user_id String
    note_id String
    label_notes_id String
    
    note Note  @relation(fields: [note_id], references: [id])
    user User  @relation(fields: [user_id], references: [id])
    label_note Label_Notes  @relation(fields: [label_notes_id], references: [id])
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id String @id @default(uuid()) @unique
    first_name String
    surname_name String
    email String @unique
    hash_passsword String
    isActivated Boolean
    isEmailVerified Boolean
    
    Note Note[]
    Label Label[]
    Reader Reader[]
    role Role @default(USER)
    Editor Editor[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    ADMIN
    USER
    UNKNOWN
}

enum Role_Notes {
    OWNER
    EDITOR
    READER
    UNKNOWN
}
