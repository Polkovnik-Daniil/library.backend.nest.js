// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//TODO: Добавить таблицы
//TODO: Добавить упущенные поля 
//TODO: Добавить связи между таблицами

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Label {
    id              String      @id @default(uuid()) @unique
    userId         String
    name            String
    
    Reader          Reader[]
    Editor          Editor[]
    User            User        @relation(fields: [userId], references: [id])
    LabelNotes      LabelNote   @relation(fields: [id], references: [labelId])
    
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model LabelNote {
    id              String  @id @default(uuid()) @unique
    noteId          String  @unique
    labelId         String  @unique
    isPublic        Boolean @default(false)

    Notes           Note[]
    Labels          Label[]
    Editor          Editor[]
    Reader          Reader[]
    
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Note {
    id              String      @id @default(uuid()) @unique
    title           String 
    description     String
    content         Json?
    isPublic        Boolean     @default(false)
    userId         String
    
    Reader          Reader[]
    Editor          Editor[]
    User            User        @relation(fields: [userId], references: [id])
    LabelNote       LabelNote   @relation(fields: [id], references: [noteId])
    
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model Editor {
    id              String      @id @default(uuid()) @unique
    userId          String
    noteId          String
    labelId         String
    labelNotesId    String
    
    note            Note        @relation(fields: [noteId], references: [id])
    user            User        @relation(fields: [userId], references: [id])
    Label           Label       @relation(fields: [labelId], references: [id])
    LabelNote       LabelNote   @relation(fields: [labelNotesId], references: [id])
    
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model Reader {
    id              String      @id @default(uuid()) @unique
    userId         String
    noteId         String
    labelId        String
    labelNotesId  String
    
    note            Note        @relation(fields: [noteId], references: [id])
    user            User        @relation(fields: [userId], references: [id])
    Label           Label       @relation(fields: [labelId], references: [id])
    LabelNote       LabelNote   @relation(fields: [labelNotesId], references: [id])
    
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model User {
    id              String      @id @default(uuid()) @unique
    firstName      String
    surnameName    String
    email           String      @unique
    hashPasssword   String
    isActivated     Boolean
    isEmailVerified Boolean
    
    Note            Note[]
    Label           Label[]
    Reader          Reader[]
    Role            Role        @default(USER)
    Editor          Editor[]
    
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

enum Role {
    ADMIN
    USER
    UNKNOWN
}

enum Role_Notes {
    OWNER
    EDITOR
    READER
    UNKNOWN
}
